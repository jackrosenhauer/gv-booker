0Term Project Information
************************

The goal is to do professional work and produce deliverables of high quality.

Third principle in the IEEE-CS/ACM Software Engineering Code of Ethics:

"Software engineers shall ensure that their products and related modifications meet
the highest professional standards possible."


Deliverables for Each Release
*****************************

For each release, submit a binder with the following parts.

Separate each part in the binder with a labelled tab.
	
The binder must contain the following in the order specified below:

	1.  Cover page with project title and team member names
	2.  Project objective and scope
	3.  Feature list for current and prior release(s)
	4.  Use cases for the current and prior release(s)
	5.  Class diagram(s) describing high-level architecture
			(Design pattern such as MVC or MVP recommended)
	6.  Git log (to see activity of members with the code repository)
	7.  Source code
			(with proper documentation and adhere to coding style/conventions)
	8.  Automated unit tests and test results
	9.  System/functional tests and code coverage reports
	10. Role and Responsibilities of each member in the team
	11. Self-reflection of the release by each team member
			- release planning issues, team-oriented issues, skills acquisition 
			- obstacles faced and strategies for resolution
			- lessons learned
			- any other information you may wish to add
	12. Other optional parts (user's guide, etc.)

Each team will have to do a demo (in my office) of their release.


Source Code Control with Git
****************************

	- Use Git for source code control
	- BitBucket is recommended for your code repository and team collaboration
	- Generate a log of changes (by team members) to include in the report
	
	Some resources for learning git:
	
		Git Website: http://git-scm.com/
		Git Tutorials: http://git-scm.com/documentation
			   http://git-scm.com/videos
			   http://vimeo.com/17118008 (Mastering Git Basics)
			   gitimmersion.com (excellent hands-on tutorials)
			   http://git-scm.com/book
		Git Repository Hosting: BitBucket (recommended), GitHub
		
	- Eclipse IDE Users: Use EGit plugin


Use Cases
*********

	- Use cases describe functional/behavioral requirements
	
	- Use a template or a software tool for writing use cases
	
	- Software tool: CaseComplete (http://casecomplete.com/)
	
	CaseComplete Installation:
		- Download the trial version from the website and install it
		- I obtained a license key from CaseComplete that will extend the
		  trial period till end of December 2015.
		  	(License Key: CCC-028C-6AF9-E4DD-70CA)
		- Start the tool, go to Tools -> Activate and enter the license key

	For ALL (whether you use CaseComplete or not, I recommended you watch
	the following short videos on use case modeling
	at http://casecomplete.com/learn:

		Get Started - Actors and Goals
		Use Cases - Create Use Cases
		Extensions - Write Use Case Extensions
		Test Cases - Test Cases, Wireframes, and Business Rules

	
Class Diagrams
**************

	You can use a tool like Dia to manually create "DETAILED" class diagrams
	for your project.
	
	Alternatively, you can also use a reverse engineering plugin/tool, if available,
	for the platform and IDE chosen for your project.
	
	Note: It is possible to have more than one class diagram if there are too
	many to fit on one page. (make perfect sense to have one class diagram per
	package or subsystem)

	Eclipse IDE users can use the ObjectAid UML Explorer plugin for generating
	class diagram(s) from code.
	
	See below for details of ObjectAid UML Explorer (http://www.objectaid.com/):
	
	Install the ObjectAid UML Explorer from inside Eclipse IDE using the update URL
	http://www.objectaid.net/update
	
	To create a class diagram using the ObjectAid UML Explorer plugin:
	
		Select project -> New -> Other... -> ObjectAid UML Diagram -> Class Diagram
		Pick a name for class diagram (for Name text field)
		Enable "Save image with Diagram as"
		
		Enable "Add Dependencies"
		Enable "Always Add Relationships"
		Disable "Show Association Multiplicity"
		Disable "Show Association Labels"
		Disable "Show Icons"
		Click Finish
		
		Drag and drop classes/interfaces on to the diagram window
		
		Save the diagram and print the saved image file.
		

Unit Testing and Test Results
*****************************

	Use an automated test tool (such as JUnit) to write comprehensive unit tests for
	units (classes) in your project.
	
	I recommend that you write unit tests only for model classes
		(Read about MVC/MVP design pattern or recall "model-view separation"
		 design idea from CIS 163)
	
	Include unit tests written in the project deliverable document and the test
	results from running those unit tests on your code base.
	

System-Level (Functional) Testing and Code Coverage Results
***********************************************************

	Find a code coverage tool for your chosen framework/IDE.
	
	Perform system-level testing, generate, and include code coverage results.
	
	Eclipse IDE users can use the EclEmma tool (http://www.eclemma.org/) for
	system testing and code coverage measurement (see details below)

	EclEmma: Java code coverage tool for Eclipse (based on the JaCoCo library)
	Website: http://www.eclemma.org/
	Eclipse Update Site: http://update.eclemma.org/
	
	Run your program in coverage mode
	Resize the "Coverage" window and take a screenshot of this window.
	Include it in your report
	
	Export coverage results:
	
		Project -> Export...
		Java -> Coverage Report, Press Next
		Select a session(s)
		Choose a destination location for your report
		Click Finish
		
		Your coverage reports will be exported to the destination you selected
		as a folder with index.html (main page) and one or more subfolders.
		
		Browse from the main page and print the coverage report for the
		following:
			coverage report page for each package
			coverage report for each class in a package

